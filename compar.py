´´´ This Code is Generated by AI´´´

import os
import re
import csv
from collections import defaultdict

def read_and_preprocess(file_path):
    """
    Read a Python file, remove indentation, and remove newlines.
    """
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    
    # Remove indentation and strip newlines
    processed_lines = [re.sub(r'\s+', ' ', line.strip()) for line in lines if line.strip()]
    return processed_lines

def compare_files(student_lines, saved_codes_dir):
    """
    Compare student code lines with all saved codes and calculate matching ratios.
    """
    results = []

    for saved_file in os.listdir(saved_codes_dir):
        saved_file_path = os.path.join(saved_codes_dir, saved_file)

        if saved_file.endswith('.py') and os.path.isfile(saved_file_path):
            saved_lines = read_and_preprocess(saved_file_path)

            # Find matching lines
            matching_lines = set(student_lines) & set(saved_lines)
            ml = len(matching_lines)  # Matching Lines (ML)

            results.append((saved_file, ml))

    return sorted(results, key=lambda x: x[1], reverse=True)[:3]  # Top 3 matches

def calculate_grade_change(value, average, max_change):
    """
    Calculate grade change based on value, average, and maximum allowed change.
    """
    return max(-max_change, min(max_change, (value / average - 1) * max_change))

def main(session_students_dir, saved_codes_dir):
    # Initialize variables
    summary = []
    notes = []
    total_cl = 0  # Total coding lines for ACL
    total_mr = 0  # Total matching ratios for AMR
    student_count = 0

    for student_file in os.listdir(session_students_dir):
        student_file_path = os.path.join(session_students_dir, student_file)

        if student_file.endswith('.py') and os.path.isfile(student_file_path):
            student_count += 1

            # Preprocess the student file
            student_lines = read_and_preprocess(student_file_path)
            cl = len(set(student_lines))  # Unique coding lines (CL)

            # Compare with saved codes
            top_matches = compare_files(student_lines, saved_codes_dir)

            # Calculate Matching Lines (ML) and Matching Ratio (MR)
            ml = sum([match[1] for match in top_matches])
            mr = ml / cl if cl > 0 else 0

            # Save matching info to notes
            notes.append(f"Student File: {student_file}\n")
            for match in top_matches:
                notes.append(f"  Match: {match[0]}, Matching Lines: {match[1]}\n")
            notes.append(f"  Matching Ratio (MR): {mr:.2f}\n\n")

            # Update totals
            total_cl += cl
            total_mr += mr

            # Append to summary
            summary.append({
                'student_file': student_file,
                'cl': cl,
                'ml': ml,
                'mr': mr
            })

    # Calculate averages
    acl = total_cl / student_count if student_count > 0 else 0
    amr = total_mr / student_count if student_count > 0 else 0

    # Finalize summary with grade changes
    csv_data = []
    for entry in summary:
        cl = entry['cl']
        ml = entry['ml']
        mr = entry['mr']

        gcfmr = calculate_grade_change(mr, amr, 20)  # Grade Change from Matching Ratio
        gcfcl = calculate_grade_change(cl, acl, 10)  # Grade Change from Coding Lines
        total_grade_change = gcfmr + gcfcl

        csv_data.append({
            'Student File': entry['student_file'],
            'CL': cl,
            'ML': ml,
            'MR': f"{mr:.2f}",
            'CL/ACL': f"{cl/acl:.2f}" if acl > 0 else '0.00',
            'MR/AMR': f"{mr/amr:.2f}" if amr > 0 else '0.00',
            'GCFMR': f"{gcfmr:.2f}",
            'GCFCL': f"{gcfcl:.2f}",
            'Total Grade Change': f"{total_grade_change:.2f}"
        })

    # Write notes to a text file
    with open('matching_notes.txt', 'w', encoding='utf-8') as notes_file:
        notes_file.writelines(notes)

    # Write CSV data
    csv_headers = ['Student File', 'CL', 'ML', 'MR', 'CL/ACL', 'MR/AMR', 'GCFMR', 'GCFCL', 'Total Grade Change']
    with open('grade_summary.csv', 'w', encoding='utf-8', newline='') as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=csv_headers)
        writer.writeheader()
        writer.writerows(csv_data)

    print("Processing complete. Output files generated: matching_notes.txt, grade_summary.csv")

if __name__ == '__main__':
    import sys

    if len(sys.argv) != 3:
        print("Usage: python compare.py <sessionStudents_dir> <savedCodes_dir>")
    else:
        main(sys.argv[1], sys.argv[2])
